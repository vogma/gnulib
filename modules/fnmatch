Description:
fnmatch() function: wildcard matching.

Files:
lib/fnmatch.c
lib/fnmatch_loop.c
m4/mbstate_t.m4
m4/fnmatch.m4

Depends-on:
fnmatch-h
alloca-opt          [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
attribute           [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
builtin-expect      [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
flexmember          [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
idx                 [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
isblank             [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
libc-config         [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
bool                [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
stdckdint-h         [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
strnlen             [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
uchar-h             [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
memchr              [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
memcmp              [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
mempcpy             [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
mbsinit             [test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1]
btowc               [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
iswctype            [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
mbsrtowcs           [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
wchar-h             [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
wctype-h            [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
wctype              [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
wmemchr             [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
wmempcpy            [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 0]
btoc32              [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
c32tolower          [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
c32_get_type_test   [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
c32_apply_type_test [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
mbsrtoc32s          [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
unistr/u32-chr      [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
unistr/u32-pcpy     [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
unistr/u32-strcat   [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]
unistr/u32-strlen   [{ test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; } && test $SMALL_WCHAR_T = 1]

configure.ac:
gl_FUNC_FNMATCH_POSIX
dnl Because of gl_REPLACE_FNMATCH_H:
gl_CONDITIONAL_HEADER([fnmatch.h])
if test $HAVE_FNMATCH = 0 || test $REPLACE_FNMATCH = 1; then
  AC_LIBOBJ([fnmatch])
  gl_PREREQ_FNMATCH
fi
gl_FNMATCH_MODULE_INDICATOR([fnmatch])

Makefile.am:

Include:
<fnmatch.h>

Link:
$(LTLIBUNISTRING) when linking with libtool, $(LIBUNISTRING) otherwise
$(MBRTOWC_LIB)

License:
LGPLv2+

Maintainer:
all, glibc
