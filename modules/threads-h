Description:
An ISO C 11 compatible <threads.h>.

Files:
lib/threads.in.h
lib/windows-thread.h
lib/windows-mutex.h
lib/windows-recmutex.h
lib/windows-timedmutex.h
lib/windows-timedrecmutex.h
lib/windows-once.h
lib/windows-cond.h
lib/windows-tls.h
lib/windows-initguard.h
m4/threads_h.m4
m4/threadlib.m4
build-aux/config.rpath

Depends-on:
gen-header
include_next
snippet/c++defs
snippet/_Noreturn
snippet/arg-nonnull
snippet/warn-on-use
time-h
havelib

configure.ac-early:
gl_ANYTHREADLIB_EARLY

configure.ac:
gl_THREADS_H
gl_THREADS_H_REQUIRE_DEFAULTS
AC_PROG_MKDIR_P

Makefile.am:
BUILT_SOURCES += threads.h

# We need the following in order to create <threads.h> when the system
# doesn't have one.
threads.h: threads.in.h $(top_builddir)/config.status $(CXXDEFS_H) $(_NORETURN_H) $(ARG_NONNULL_H) $(WARN_ON_USE_H)
@NMD@	$(AM_V_GEN)$(MKDIR_P) '%reldir%'
	$(gl_V_at)$(SED_HEADER_STDOUT) \
	      -e 's|@''GUARD_PREFIX''@|${gl_include_guard_prefix}|g' \
	      -e 's|@''INCLUDE_NEXT_AS_FIRST_DIRECTIVE''@|$(INCLUDE_NEXT_AS_FIRST_DIRECTIVE)|g' \
	      -e 's|@''HAVE_THREADS_H''@|$(HAVE_THREADS_H)|g' \
	      -e 's|@''INCLUDE_NEXT''@|$(INCLUDE_NEXT)|g' \
	      -e 's|@''PRAGMA_SYSTEM_HEADER''@|@PRAGMA_SYSTEM_HEADER@|g' \
	      -e 's|@''PRAGMA_COLUMNS''@|@PRAGMA_COLUMNS@|g' \
	      -e 's|@''NEXT_AS_FIRST_DIRECTIVE_THREADS_H''@|$(NEXT_AS_FIRST_DIRECTIVE_THREADS_H)|g' \
	      -e 's|@''NEXT_THREADS_H''@|$(NEXT_THREADS_H)|g' \
	      -e 's/@''GNULIB_CALL_ONCE''@/$(GNULIB_CALL_ONCE)/g' \
	      -e 's/@''GNULIB_CND''@/$(GNULIB_CND)/g' \
	      -e 's/@''GNULIB_MTX''@/$(GNULIB_MTX)/g' \
	      -e 's/@''GNULIB_THRD''@/$(GNULIB_THRD)/g' \
	      -e 's/@''GNULIB_TSS''@/$(GNULIB_TSS)/g' \
	      -e 's|@''HAVE_THREAD_LOCAL''@|$(HAVE_THREAD_LOCAL)|g' \
	      -e 's|@''BROKEN_THRD_JOIN''@|$(BROKEN_THRD_JOIN)|g' \
	      -e 's|@''BROKEN_THRD_START_T''@|$(BROKEN_THRD_START_T)|g' \
	      -e 's|@''REPLACE_CALL_ONCE''@|$(REPLACE_CALL_ONCE)|g' \
	      -e 's|@''REPLACE_CND_BROADCAST''@|$(REPLACE_CND_BROADCAST)|g' \
	      -e 's|@''REPLACE_CND_DESTROY''@|$(REPLACE_CND_DESTROY)|g' \
	      -e 's|@''REPLACE_CND_INIT''@|$(REPLACE_CND_INIT)|g' \
	      -e 's|@''REPLACE_CND_SIGNAL''@|$(REPLACE_CND_SIGNAL)|g' \
	      -e 's|@''REPLACE_CND_TIMEDWAIT''@|$(REPLACE_CND_TIMEDWAIT)|g' \
	      -e 's|@''REPLACE_CND_WAIT''@|$(REPLACE_CND_WAIT)|g' \
	      -e 's|@''REPLACE_MTX_DESTROY''@|$(REPLACE_MTX_DESTROY)|g' \
	      -e 's|@''REPLACE_MTX_INIT''@|$(REPLACE_MTX_INIT)|g' \
	      -e 's|@''REPLACE_MTX_LOCK''@|$(REPLACE_MTX_LOCK)|g' \
	      -e 's|@''REPLACE_MTX_TIMEDLOCK''@|$(REPLACE_MTX_TIMEDLOCK)|g' \
	      -e 's|@''REPLACE_MTX_TRYLOCK''@|$(REPLACE_MTX_TRYLOCK)|g' \
	      -e 's|@''REPLACE_MTX_UNLOCK''@|$(REPLACE_MTX_UNLOCK)|g' \
	      -e 's|@''REPLACE_THRD_CREATE''@|$(REPLACE_THRD_CREATE)|g' \
	      -e 's|@''REPLACE_THRD_CURRENT''@|$(REPLACE_THRD_CURRENT)|g' \
	      -e 's|@''REPLACE_THRD_DETACH''@|$(REPLACE_THRD_DETACH)|g' \
	      -e 's|@''REPLACE_THRD_EQUAL''@|$(REPLACE_THRD_EQUAL)|g' \
	      -e 's|@''REPLACE_THRD_EXIT''@|$(REPLACE_THRD_EXIT)|g' \
	      -e 's|@''REPLACE_THRD_JOIN''@|$(REPLACE_THRD_JOIN)|g' \
	      -e 's|@''REPLACE_THRD_SLEEP''@|$(REPLACE_THRD_SLEEP)|g' \
	      -e 's|@''REPLACE_THRD_YIELD''@|$(REPLACE_THRD_YIELD)|g' \
	      -e 's|@''REPLACE_TSS_CREATE''@|$(REPLACE_TSS_CREATE)|g' \
	      -e 's|@''REPLACE_TSS_DELETE''@|$(REPLACE_TSS_DELETE)|g' \
	      -e 's|@''REPLACE_TSS_GET''@|$(REPLACE_TSS_GET)|g' \
	      -e 's|@''REPLACE_TSS_SET''@|$(REPLACE_TSS_SET)|g' \
	      -e '/definitions of _GL_FUNCDECL_RPL/r $(CXXDEFS_H)' \
	      -e '/definition of _Noreturn/r $(_NORETURN_H)' \
	      -e '/definition of _GL_ARG_NONNULL/r $(ARG_NONNULL_H)' \
	      -e '/definition of _GL_WARN_ON_USE/r $(WARN_ON_USE_H)' \
	      $(srcdir)/threads.in.h > $@-t
	$(AM_V_at)mv $@-t $@
MOSTLYCLEANFILES += threads.h threads.h-t

Include:
<threads.h>

Link:
$(LIBTHREADLOCAL) if you use the thread_local macro

License:
LGPLv2+

Maintainer:
all
